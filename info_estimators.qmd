---
title: "Estimators"
bibliography: references.bib
nocite: |
  @diaz2023nonparametric, @hoffman2023introducing, @kennedy2019nonparametric @haneuse2013estimation, @bickel1993efficient
---

{{< include macros.qmd >}}

To recap, we've

1.  defined a causal parameter $\theta$ that is a function of a general hypothetical intervention, $\dd_t(a_t, h_t, \epsilon)$, and

2.  defined the necessary assumptions to identify the expected value of $Y$ when $A$ is replaced with the output of $\dd_t(a_t, h_t, \epsilon)$ from observed data.

It's now time to discussing how to estimate these parameters.

### Sequential Regression Estimator

One possible estimator is simply a *plug-in* estimator of the identification result. This estimator is often referred to as G-computation.

::: algorithm
::: algorithm-header
Algorithm: Sequential regressions
:::

::: algorithm-body
1.  Set $\m_{i,\tau +1} = Y_i$.

    For $t = \tau, ..., 1$:

    1.  Using a pre-specified parametric model, regress $\m_{i,t+1}$ on $\{A_{i, t}, H_{i,t}\}$.

    2.  Generate predictions from this model with $A_{i,t}$ changed to $A^{\dd}_{i,t}$. Set $\m_{i, t}$ as these predictions.

2.  Take the final estimate as $\hat{\theta} = \frac{1}{n}\sum_{i=1}^n \m_{i, 1}$.

3.  Compute standard errors using a bootstrap of steps 1 and 2.
:::
:::

+-------------------------+----------------------------------------------------+
| Pros ✅                 | Cons ❌                                            |
+:=======================:+:==================================================:+
| -   Simple to implement | -   Requires correct estimation of all regressions |
|                         |                                                    |
|                         | -   Requires pre-specified parametric models       |
+-------------------------+----------------------------------------------------+

: {tbl-colwidths="\[25,25\]"}

### Density-ratio estimation {#sec-density-ratio-estimation}

The following three estimators all rely on estimating the density ratio $r_t(a_t, h_t) = \frac{\g_t^\dd(a_t \mid h_t)}{\g_t(a_t \mid h_t)}$. We will often refer to this ratio as the *intervention mechanism* throughout the workshop.

-   We can directly estimate this density ratio with a classification trick. This process is fully automated and hidden from the user.

-   Can compute the odds in a classification problem in an augmented dataset with $2n$ observations where the outcome is the auxiliary variable $\Lambda$ (defined below) and the predictors are the variables $A_t$ and $H_t$. In the $2n$ augmented data set, the data structure at time $t$ is redefined as

$$
(H_{\lambda, i, t}, A_{\lambda, i, t}, \Lambda_{\lambda, i} : \lambda = 0, 1; i = 1, ..., n)
$$

-   $\Lambda_{\lambda, i} = \lambda_i$ indexes duplicate values

    -   For all duplicated observations $\lambda\in\{0,1\}$ with the same $i$, $H_{\lambda, i, t}$ is the same

    -   For $\lambda = 0$, $A_{\lambda, i, t}$ equals the observed exposure values $A_{i, t}$

    -   For $\lambda=1$, $A_{\lambda, i, t}$ equals the exposure values under the intervention $\dd$, $A^{\dd}_t$

-   The classification approach to density ratio estimation proceeds by estimating the conditional probability that $\Delta=1$ in this dataset, and dividing it by the corresponding estimate of the conditional probability that $\Delta=0$. Specifically, denoting $p^\lambda$ the distribution of the data in the augmented dataset, we have:

$$
r_t(a_t, h_t) = \frac{p^\lambda(a_t, h_t \mid \Lambda =
    1)}{p^\lambda(a_t, h_t \mid \Lambda =
    0)}=\frac{p^\lambda(\Lambda = 1\mid A_t=a_t,
    H_t=h_t)}{p^\lambda(\Lambda = 0\mid A_t=a_t, H_t=h_t)}
$$

### Inverse Probability Weighting

$$
\theta = \E \bigg[ \bigg\{\prod_{t=1}^\tau r_t(a_t, h_t) \bigg\} Y \bigg]
$$

::: algorithm
::: algorithm-header
Algorithm: IPW Estimator
:::

::: algorithm-body
1.  Construct estimates of $r_{i,t}(a_t, h_t)$ using the density ratio classification trick and a pre-specified parametric model.

2.  Define the weights $w_{i} = \prod_{t=1}^\tau r_{i,t}(a_t, h_t)$.

3.  Take the final estimate as $\hat{\theta} = \frac{1}{n}\sum_{i=1}^n w_{i}\times y_i$.

4.  Compute standard errors using a bootstrap of steps 1-3.
:::
:::

+-------------------------+---------------------------------------------------+
| Pros ✅                 | Cons ❌                                           |
+:=======================:+:=================================================:+
| -   Simple to implement | -   Requires correct estimation of density ratios |
|                         |                                                   |
|                         | -   Requires pre-specified parametric models      |
+-------------------------+---------------------------------------------------+

: {tbl-colwidths="\[25,25\]"}

### Doubly Robust Estimators

G-computation and IPW estimators require the estimation of nuisance parameters with parametric models. We will now turn our attention to two non-parametric estimators:

1.  targeted minimum-loss based estimator (TMLE), and

2.  a sequentially doubly-robust estimator (SDR).

#### Efficient Influence Function

Key to constructing the TMLE and SDR is the *efficient influence function* (EIF).

-   The EIF characterizes the asymptotic behavior of all regular and efficient estimators.

-   The EIF characterizes the first-order bias of pathwise differentiable estimands.

Before we introduce the EIF, it's necessary to make some additional assumptions on $A$ and $\dd$.

::: callout-important
## Assumptions

1.  The treatment $A$ is discrete, or

2.  If $A$ is continuous, the function $\dd$ is piecewise smooth invertible

3.  The function $\dd$ does not depend on the observed distribution $\P$
:::

-   These assumptions ensure that the efficient influence function of $\theta$ for interventions $\dd$ have a structure similar to the influence function for the effect of dynamic regimes.

-   This allows for multiply robust estimation, which is not generally possible for interventions $\dd$ that depend on $\P$.

Define the function

$$
\phi_t: O \mapsto \sum_{s=t}^\tau \bigg( \prod_{k=t}^s r_k(a_k, h_k)\bigg) \big\{\m_{s+1}(a_{s+1}^\dd, h_{s+1}) - \m_s(a_s, h_s) \big\} + \m_t(a_t^\dd, h_t).
$$

The efficient influence function for estimating $\theta = \E[\m_1(A^\dd, L_1)]$ in the non-parametric model is given by $\phi_1(O) - \theta$. In the case of single time-point, the influence function simplifies to

$$
r(a, w)\{Y - \m(a,w)\} + \m(a^{\dd},w) - \theta.
$$

#### Targeted Minimum-Loss Based Estimation

::: algorithm
::: algorithm-header
Algorithm: TMLE
:::

::: algorithm-body
1.  Construct estimates of $r_{i,t}(a_t, h_t)$ using the density ratio classification trick and your favorite regression method.

2.  For $s = 1, ..., \tau$, compute the weights: $w_{i,s} = \prod_{k=1}^s r_{i,k}(a_{i,k}, h_{i,k})$

3.  Set $\tilde{\m}_{i,\tau +1}(A^\dd_{i,t+1}, H_{i,t+1}) = Y_i$.

    For $t = \tau, ..., 1$:

    1.  Regress $\tilde{\m}_{i,t+1}(A^\dd_{i,t+1}, H_{i,t+1})$ on $\{A_{i, t}, H_{i,t}\}$.

    2.  Fit the generalized linear tilting model:

        $\text{link }\tilde{\m}^\epsilon_t(A_{i,t}, H_{i,t}) = \epsilon + \text{link }\tilde{\m}_t(A_{i,t}, H_{i,t})$

        with weights $w_{i,t}$.

    3.  Let $\hat\epsilon$ be the maximum likelihood estimate, and update the estimates as:

        $\text{link }\tilde{\m}^\hat\epsilon_t(A^\dd_{i,t}, H_{i,t}) = \epsilon + \text{link }\tilde{\m}_t(A^\dd_{i,t}, H_{i,t})$

        $\text{link }\tilde{\m}^\hat\epsilon_t(A_{i,t}, H_{i,t}) = \epsilon + \text{link }\tilde{\m}_t(A_{i,t}, H_{i,t})$

    4.  Update $\tilde{\m}_{i,t} = \tilde{\m}^\hat\epsilon_{i,t}$, $t = t-1$, and iterate.

4.  The final estimate is defined as $\hat\theta = \frac{1}{n}\sum_{i=1}^n\tilde{m}_{i, 1}(A^\dd_{i, 1}, L_{i, 1})$.
:::
:::

+------------------------------+------------------------------------+
| Pros ✅                      | Cons ❌                            |
+:============================:+:==================================:+
| -   Substitution estimator   | -   not sequentially doubly-robust |
|                              |                                    |
| -   doubly-robust            |                                    |
|                              |                                    |
| -   can use machine learning |                                    |
+------------------------------+------------------------------------+

: {tbl-colwidths="\[25,25\]"}

#### Sequentially Doubly Robust Estimator

::: algorithm
::: algorithm-header
Algorithm: SDR Estimator
:::

::: algorithm-body
1.  Construct estimates of $r_{i,t}(a_t, h_t)$ using the density ratio classification trick and your favorite regression method.

2.  Initialize $\phi_{\tau +1}(O_i) = Y_i$.

    For $t = \tau, ..., 1$:

    1.  Compute the pseudo-outcome $\check{Y}_{i,t+1} = \phi_{t+1}(O_i)$.

    2.  Regress $\check{Y}_{i,t+1}$ on $\{A_{i, t}, H_{i,t}\}$.

    3.  Let $\check\m_{i,t}$ denote the output. Update $\m_{i,t} = \check\m_{i,t}$ and iterate.

3.  The final estimate is defined as $\hat\theta = \frac{1}{n}\sum_{i=1}^n\phi_1(O_i).$
:::
:::

+--------------------------------+----------------------------------+
| Pros ✅                        | Cons ❌                          |
+:==============================:+:================================:+
| -   doubly-robust              | -   not a substitution estimator |
|                                |                                  |
| -   sequentially doubly-robust |                                  |
|                                |                                  |
| -   can use machine learning   |                                  |
+--------------------------------+----------------------------------+

: {tbl-colwidths="\[25,25\]"}

### Choosing an Estimator

How should we choose which estimator to use?

-   In general we never recommend using the IPW or sequential regression estimator. Both require the use of correctly pre-specified parametric models for valid statistical inference (ya right 😂).

-   The TMLE and SDR estimators, however, are both doubly or sequentially doubly robust and can be used with machine-learning algorithms while remaining $\sqrt{n}$-consistent.

Wait, what does it mean for an estimator to be doubly robust?

-   For the simple case of a single time point, an estimator is considered doubly robust if it is able to produce a consistent estimate of the target parameter as long as at least one of the nuisance parameters is consistently estimated.

-   For time-varying setting, an estimator is doubly robust if, for some time $s$, all outcome regressions for $t >s$ are consistently estimated and all intervention mechanisms for $t \leq s$ are consistently estimated.

-   Sequential double robustness (often also referred to as $2^\tau$-multiply robust) implies that an estimator is consistent if for all times either the outcome or intervention mechanism is consistently estimated.

While the SDR estimator may be more robust to model misspecification, the TMLE does have the advantage of being a substitution estimator. Because of this, estimates from the TMLE are guaranteed to stay within the valid range of the outcome. Taken together, this leads to the following recommendations for choosing between the TMLE and SDR:

::: {.callout-tip appearance="simple"}
-   If treatment is not time-varying, use the TMLE.

-   If treatment is time-varying first try the SDR.

-   If the SDR estimator produces "out-of-bounds" estimates, instead use the TMLE.
:::

|                                       | IPW | G-comp. | TMLE | SDR |
|---------------------------------------|:---:|:-------:|:----:|:---:|
| Uses outcome regression               |     |   ⭐    |  ⭐  | ⭐  |
| Uses the propensity score             | ⭐  |         |  ⭐  | ⭐  |
| Valid inference with machine-learning |     |         |  ⭐  | ⭐  |
| Substitution estimator                |     |   ⭐    |  ⭐  |     |
| Doubly robust                         |     |         |  ⭐  | ⭐  |
| Sequentially doubly robust            |     |         |      | ⭐  |

: **Table 1.** Summary of estimator properties. {tbl-colwidths="\[40,15,15,15,15\]"}

### Cross-fitting

When estimating nuisance parameters with data adaptive algorithms, you should perform a process similar to cross-validation called cross-fitting. Cross-fitting ensures:

-   that standard errors will be correct, and

-   can help reduce estimator bias.

Cross-fitting is fully automated in `lmtp`, but for more information we recommend reviewing @chernozhukov2018double, @diaz2020machine, and @zivich2021machine.
